@page "/password/{id:guid}"
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@using MudBlazor

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudPaper Class="pa-4 mx-auto" Style="max-width: 600px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
            Afficher le mot de passe en clair
        </MudText>

        @if (!string.IsNullOrEmpty(decryptedPassword))
        {
            <MudText Typo="Typo.h6" Class="mt-4">
                Mot de passe : <MudText Color="Color.Primary" Class="font-weight-bold">@decryptedPassword</MudText>
            </MudText>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       Class="mt-3"
                       OnClick="CopyToClipboard">
                Copier le mot de passe
            </MudButton>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                @errorMessage
            </MudAlert>
        }
        else
        {
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Class="mt-4" />
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public Guid id { get; set; }

    private string decryptedPassword { get; set; }
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Récupérer le JWT depuis le local storage
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            errorMessage = "Vous devez être connecté pour accéder à cette page.";
            return;
        }

        try
        {
            // Ajouter le token JWT aux headers
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Appeler l'API pour récupérer le mot de passe
            var result = await Http.GetFromJsonAsync<PlainTextResponse>($"api/passwords/{id}/plaintext");

            if (result != null)
            {
                decryptedPassword = result.password;
            }
            else
            {
                errorMessage = "Impossible de récupérer le mot de passe.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", decryptedPassword);
        Snackbar.Add("Mot de passe copié dans le presse-papiers !", Severity.Success);
    }

    public class PlainTextResponse
    {
        public string password { get; set; }
    }
}
