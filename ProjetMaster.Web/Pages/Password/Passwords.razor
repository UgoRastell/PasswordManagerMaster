@page "/passwords"
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ILocalStorageService localStorage
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using PasswordManager.Core.Models

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudPaper Class="pa-4 mx-auto" Style="max-width: 800px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
            Gestion des Mots de Passe
        </MudText>

        <MudTextField @bind-Value="_searchString" Placeholder="Recherche par titre"
                      Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2"
                      @oninput="OnSearchChanged" />

        <MudDataGrid T="PasswordEntry" MultiSelection="true" Items="@filteredPasswords"
                     SortMode="SortMode.Multiple" Filterable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Mots de Passe</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="@(() => NavigationManager.NavigateTo("/generator"))">
                    Ajouter un mot de passe
                </MudButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Title" Title="Titre" />
                <PropertyColumn Property="x => x.Username" Title="Nom d'utilisateur" />
                <PropertyColumn Property="x => x.Notes" Title="Notes" />
                <PropertyColumn Property="x => GetCategoryName(x.CategoryId)" Title="Catégorie" />
                <TemplateColumn Title="Actions">
                    <CellTemplate Context="context">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                       Color="Color.Info"
                                       OnClick="@(() => ViewPassword(context.Item.Id))"
                                       Title="Voir le mot de passe" />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       OnClick="@(() => EditPassword(context.Item.Id))"
                                       Title="Modifier" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => DeletePassword(context.Item.Id))"
                                       Title="Supprimer" />
                    </CellTemplate>
                </TemplateColumn>

            </Columns>
            <PagerContent>
                <MudDataGridPager T="PasswordEntry" />
            </PagerContent>
        </MudDataGrid>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <MudAlert Severity="Severity.Success" Class="mt-4">
                @successMessage
            </MudAlert>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                @errorMessage
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<PasswordEntry> allPasswords = new();
    private List<PasswordEntry> filteredPasswords = new();
    private List<Category> categories = new();
    private string _searchString = "";
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        await LoadCategories();
        await LoadPasswords();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<Category>>("api/categories");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement des catégories: " + ex.Message);
        }
    }

    private async Task LoadPasswords()
    {
        try
        {
            allPasswords = await Http.GetFromJsonAsync<List<PasswordEntry>>("api/passwords");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement des mots de passe : " + ex.Message);
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        _searchString = e.Value?.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            filteredPasswords = new List<PasswordEntry>(allPasswords);
        }
        else
        {
            filteredPasswords = allPasswords
                .Where(x => x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }

    private string GetCategoryName(Guid? categoryId)
    {
        if (!categoryId.HasValue)
            return "Aucune";

        var cat = categories.FirstOrDefault(c => c.Id == categoryId.Value);
        return cat != null ? cat.Name : "Catégorie inconnue";
    }

    private void ViewPassword(Guid id)
    {
        NavigationManager.NavigateTo($"/password/{id}");
    }

    private void EditPassword(Guid id)
    {
        NavigationManager.NavigateTo($"/editpassword/{id}");
    }

    private async Task DeletePassword(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirmation",
            "Voulez-vous vraiment supprimer ce mot de passe ?",
            yesText: "Oui",
            cancelText: "Annuler");

        if (result == true)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/passwords/{id}");
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Mot de passe supprimé avec succès.";
                    await LoadPasswords();
                    ApplyFilters();
                }
                else
                {
                    errorMessage = $"Erreur lors de la suppression : {response.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur : {ex.Message}";
            }
        }
    }
}
