@page "/editpassword/{id:guid}"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService DialogService
@using MudBlazor

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudPaper Class="pa-4 mx-auto" Style="max-width: 600px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
            Modifier le mot de passe
        </MudText>

        @if (isLoading)
        {
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Class="mt-4" />
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                @errorMessage
            </MudAlert>
        }
        else
        {
            <!-- Formulaire d'édition -->
            <MudTextField Label="Titre" @bind-Value="passwordEntry.Title" Required="true" RequiredError="Le titre est requis." Class="mb-3" />
            <MudTextField Label="Nom d'utilisateur" @bind-Value="passwordEntry.Username" Required="true" RequiredError="Le nom d'utilisateur est requis." Class="mb-3" />
            <MudTextField Label="Notes" @bind-Value="passwordEntry.Notes" Class="mb-3" />

            <!-- Sélection de la catégorie -->
            <MudSelect T="Guid?" Label="Catégorie" @bind-Value="passwordEntry.CategoryId" Class="mb-3">
                <MudSelectItem T="Guid?" Value="null">Aucune catégorie</MudSelectItem>
                @foreach (var cat in categories)
                {
                    <MudSelectItem T="Guid?" Value="@cat.Id">@cat.Name</MudSelectItem>
                }
            </MudSelect>

            <!-- Bouton Enregistrer -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">
                Enregistrer les modifications
            </MudButton>

            <!-- Message de succès -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">@successMessage</MudAlert>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public Guid id { get; set; }

    private PasswordEntryDto passwordEntry = new();
    private List<CategoryDto> categories = new();
    private string errorMessage;
    private string successMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            errorMessage = "Vous devez être connecté pour modifier un mot de passe.";
            isLoading = false;
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await LoadPassword();
        await LoadCategories();
        isLoading = false;
    }

    private async Task LoadPassword()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PasswordEntryDto>($"api/passwords/{id}");
            if (response != null)
            {
                passwordEntry = response;
            }
            else
            {
                errorMessage = "Mot de passe introuvable.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement : {ex.Message}";
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/categories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des catégories : {ex.Message}";
        }
    }

    private async Task SaveChanges()
    {
        successMessage = "";
        errorMessage = "";

        try
        {
            var response = await Http.PutAsJsonAsync($"api/passwords/{id}", passwordEntry);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Mot de passe mis à jour avec succès.";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/passwords");
            }
            else
            {
                errorMessage = "Erreur lors de la mise à jour.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
    }

    public class PasswordEntryDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Username { get; set; }
        public string EncryptedPassword { get; set; }
        public string Notes { get; set; }
        public Guid? CategoryId { get; set; }
        public Guid UserId { get; set; }
    }

    public class CategoryDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
    }
}
