@page "/categoriesCreate"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService DialogService
@using MudBlazor

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudPaper Class="pa-4 mx-auto" Style="max-width: 600px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
            Créer une nouvelle catégorie
        </MudText>
        <MudForm @ref="form" @bind-IsValid="formIsValid">
            <!-- Champ Nom de la catégorie -->
            <MudTextField T="string"
                          Label="Nom de la catégorie"
                          @bind-Value="categoryDto.Name"
                          Required="true"
                          RequiredError="Le nom de la catégorie est requis." />

            <!-- Bouton de soumission -->
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-4"
                       Disabled="@( !formIsValid )"
                       OnClick="SubmitCategory">
                Créer la catégorie
            </MudButton>
        </MudForm>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <MudAlert Severity="Severity.Success" Class="mt-4">
                @successMessage
            </MudAlert>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                @errorMessage
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    // Référence au formulaire et indicateur de validité
    MudForm form;
    bool formIsValid = false;
    string successMessage;
    string errorMessage;

    // DTO utilisé pour la création d'une catégorie
    CategoryDto categoryDto = new CategoryDto();

    protected override void OnInitialized()
    {
        // Génère un ID côté client (vous pouvez laisser l'API le générer aussi)
        categoryDto.Id = Guid.NewGuid();
    }

    private async Task SubmitCategory()
    {
        await form.Validate();
        if (formIsValid)
        {
            try
            {
                // Récupère le token JWT stocké lors du login
                var token = await localStorage.GetItemAsync<string>("authToken");
                if (!string.IsNullOrWhiteSpace(token))
                {
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                }

                // Envoie la requête POST à l'API
                var response = await Http.PostAsJsonAsync("api/categories", categoryDto);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Catégorie créée avec succès.";
                    // Réinitialiser le DTO pour vider les champs du formulaire
                    categoryDto = new CategoryDto { Id = Guid.NewGuid() };
                    // Optionnel : réinitialiser la validation si nécessaire
                    // await form.ResetValidation();
                }
                else
                {
                    errorMessage = $"Erreur lors de la création de la catégorie : {response.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur : {ex.Message}";
            }
        }
    }

    public class CategoryDto
    {
        public Guid Id { get; set; }

        [Required(ErrorMessage = "Le nom de la catégorie est requis.")]
        public string Name { get; set; }
    }
}
